# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'umeng.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import requests
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QListWidgetItem, QMessageBox, QWidget, QLabel, QMainWindow, QApplication

import myjson
from getqrcode import search
from mainwindow import Ui_wechatqrcode
from proxy import startmimt, openproxy, closeproxy
from umengapi import getqrimglist


class Ui_umeng(object):


    def setupUi(self, umeng):
        umeng.setObjectName("umeng")
        umeng.resize(1200, 801)
        umeng.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(umeng)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 50))
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 0, 0, 1, 4)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton.setFont(font)
        self.pushButton.setIconSize(QtCore.QSize(32, 32))
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 0, 4, 1, 1)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setMinimumSize(QtCore.QSize(800, 500))
        self.scrollArea.setMaximumSize(QtCore.QSize(1500, 1300))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 798, 680))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_2.addWidget(self.scrollArea, 1, 2, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetMinAndMaxSize)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 50))
        self.pushButton_2.setMaximumSize(QtCore.QSize(16777215, 50))
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 50))
        self.pushButton_3.setMaximumSize(QtCore.QSize(16777215, 50))
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setMinimumSize(QtCore.QSize(0, 50))
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setMinimumSize(QtCore.QSize(0, 50))
        self.pushButton_4.setMaximumSize(QtCore.QSize(16777215, 50))
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setMinimumSize(QtCore.QSize(0, 30))
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMinimumSize(QtCore.QSize(0, 30))
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setMaximumSize(QtCore.QSize(200, 600))
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout.addWidget(self.textBrowser)
        self.gridLayout_2.addLayout(self.verticalLayout, 1, 4, 1, 1)
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setObjectName("listWidget")
        self.gridLayout_2.addWidget(self.listWidget, 1, 0, 1, 2)
        umeng.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(umeng)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        umeng.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(umeng)
        self.statusbar.setObjectName("statusbar")
        umeng.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(umeng)
        self.cnbt()
        self.initdata()
        QtCore.QMetaObject.connectSlotsByName(umeng)

    def retranslateUi(self, umeng):
        _translate = QtCore.QCoreApplication.translate
        umeng.setWindowTitle(_translate("umeng", "微信二维码获取"))
        self.pushButton.setToolTip(_translate("umeng", "输入公众号链接点击获取"))
        self.pushButton.setText(_translate("umeng", "添加到列表"))
        self.pushButton_2.setText(_translate("umeng", "开启抓取服务"))
        self.pushButton_3.setText(_translate("umeng", "打开系统代理"))
        self.pushButton_5.setText(_translate("umeng", "获取选中链接"))
        self.pushButton_4.setText(_translate("umeng", "关闭系统代理"))
        self.label_2.setText(_translate("umeng", "抓取服务状态："))
        self.label.setText(_translate("umeng", "代理状态："))
        self.textBrowser.setHtml(_translate("umeng",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'SimSun\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">使用方法：</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1.先安装证书，下载地址http://mitm.it，密码为空，安装到目录根证书发布者</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2.先开启抓取服务，再开启系统代理，点开公众号内二维码的页面，等待加载完成</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3.页面加载完成会自动保存登录信息，此时关闭系统代理。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4.将二维码页面复制到窗口，回车添加到列表，点击列表内容，点获取选中链接，即可获取到二维码的图片在线更新地址</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">在线地址会缓存在本地，每次打开可以自动刷新</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5.双击列表内容可以删除无效资源，获取在线二维码地址为防止频繁设置了等待时间10秒，获取过程会显示转圈为正常，请等待！每个号频繁后换号获取其他链接即可</p></body></html>"))
        self.menu.setTitle(_translate("umeng", "菜单"))
        self.menu.addAction(_translate("f_1", "公众号文章内二维码抓取"))

    def cnbt(self):
        self.pushButton.clicked.connect(self.addtolist)
        self.listWidget.itemClicked.connect(self.chooseitem)
        self.listWidget.itemDoubleClicked.connect(self.doubleck)
        self.pushButton_2.clicked.connect(lambda: startmimt(self))
        self.pushButton_3.clicked.connect(lambda: openproxy(self))
        self.pushButton_4.clicked.connect(lambda: closeproxy(self))
        self.pushButton_5.clicked.connect(self.cacheimg)
        self.lineEdit.returnPressed.connect(self.addtolist)
        self.menu.triggered.connect(self.openchild)

    def initdata(self):
        self.data = myjson.read(myjson.resource_path('./data.json'))
        self.mylist = list(self.data.keys())
        for i in self.mylist:
            item = QListWidgetItem(i)
            self.listWidget.addItem(item)
            piclist = self.data[i]
            self.getcode(piclist)

    def addtolist(self):
        text = self.lineEdit.text()
        if text not in self.mylist and text !="":
            item = QListWidgetItem(text)
            self.listWidget.addItem(item)
            # 创建本地缓存  载入时加载本地缓存！
            self.data[text] = []
            self.mylist= list(self.data.keys())
            myjson.write(myjson.resource_path('./data.json'), self.data)

    def chooseitem(self):
        critem = self.listWidget.currentItem().text()
        newlist = self.data[critem]
        self.getcode(newlist)


    def doubleck(self):
        critem = self.listWidget.currentItem()
        reply = QMessageBox.question(self.centralwidget, '删除', '确认删除吗？',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if reply == QMessageBox.Yes:
            self.listWidget.takeItem(self.listWidget.currentRow())
            del self.data[critem.text()]
            myjson.write(myjson.resource_path('./data.json'), self.data)

    def cacheimg(self):
        if self.listWidget.currentItem():
            newlist = getqrimglist(self.listWidget.currentItem().text(),self.centralwidget)
            self.getcode(newlist)


    def getcode(self,list):
        self.filewidget = QWidget()
        self.filewidget.setMinimumSize(350, 3000)
        row = len(list) / 3
        positions = [(i, j) for i in range(3) for j in range(round(row))]  # 规定每行每列多少数据  第一个是行 第二个是列
        for position, picurl in zip(positions, list):  # 在for里面新建qlabel 这样每个label才会是独立的
            myimg = QLabel(self.filewidget)
            myimg.setScaledContents(True)
            res = requests.get(picurl)
            print(position,picurl)
            img = QImage.fromData(res.content)
            myimg.setPixmap(QPixmap.fromImage(img))
            myimg.setFixedSize(200, 200)
            myimg.move(250 * position[0], 250 * position[1])
        self.scrollArea.setWidget(self.filewidget)

    def openchild(self,action):
        print("zi",action)
        self.childwindow = QMainWindow()
        ui=Ui_wechatqrcode()
        ui.setupUi(self.childwindow)
        self.childwindow.show()
        print(558888)

